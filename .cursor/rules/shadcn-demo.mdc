---
description: shadcnを活用した小規模Astroウェブサイト制作のためのプロジェクトルール。コンポーネント開発ではshadcnを最優先で使用し、TypeScriptとReactを組み合わせたコーディング規約を定義しています。
globs: *.tsx, *.ts, *.astro, src/components/**/*.*, src/layouts/**/*.*, src/pages/**/*.*
alwaysApply: true
---
---
description: shadcnを活用した小規模Astroウェブサイト制作のためのプロジェクトルール。コンポーネント開発ではshadcnを最優先で使用し、TypeScriptとReactを組み合わせたコーディング規約を定義しています。
globs: *.tsx, *.ts, *.astro, src/components/**/*.*, src/layouts/**/*.*, src/pages/**/*.*
alwaysApply: true
---

# shadcn デモサイト プロジェクトルール

## 目次
- [shadcn デモサイト プロジェクトルール](mdc:#shadcn-デモサイト-プロジェクトルール)
  - [目次](mdc:#目次)
  - [プロジェクト概要](mdc:#プロジェクト概要)
  - [技術スタック](mdc:#技術スタック)
  - [開発環境](mdc:#開発環境)
  - [コーディング規約](mdc:#コーディング規約)
    - [全般](mdc:#全般)
    - [Astro](mdc:#astro)
    - [React](mdc:#react)
    - [TypeScript](mdc:#typescript)
    - [shadcn](mdc:#shadcn)
  - [ディレクトリ構造](mdc:#ディレクトリ構造)
  - [コンポーネント開発ガイドライン](mdc:#コンポーネント開発ガイドライン)
  - [パフォーマンス最適化](mdc:#パフォーマンス最適化)
  - [アクセシビリティ](mdc:#アクセシビリティ)

## プロジェクト概要

このプロジェクトは、shadcnをウェブサイト制作で活用する際のメリットを訴求するためのデモサイトです。shadcnの機能を最大限に活用し、コンポーネント開発の効率化の可能性を示すことを目的としています。

サイトの規模：5〜6ページの小規模ウェブサイト

## 技術スタック

- **フレームワーク**: [Astro](mdc:https:/astro.build)
- **UIライブラリ**: [React](mdc:https:/reactjs.org)
- **言語**: [TypeScript](mdc:https:/www.typescriptlang.org)
- **UIコンポーネント**: [shadcn/ui](mdc:https:/ui.shadcn.com)
- **スタイリング**: Tailwind CSS (shadcnと併用)

## 開発環境

- Node.js 18以上
- pnpm (パッケージマネージャー)
- VSCode (推奨エディタ)
  - 推奨拡張機能:
    - Astro
    - Tailwind CSS IntelliSense
    - ESLint
    - Prettier

## コーディング規約

### 全般

- ファイル名はパスカルケース（PascalCase）でコンポーネントを命名
- 変数・関数名はキャメルケース（camelCase）で命名
- インデントは2スペース
- セミコロンは必須
- コメントは日本語で記述可、ただし関数やクラスの説明はJSDoc形式で記述

### Astro

- Astroコンポーネントは`.astro`拡張子を使用
- Astroページは`src/pages`ディレクトリに配置
- レイアウトコンポーネントは`src/layouts`に配置
- データフェッチはビルド時に行うことを優先
- アイランドアーキテクチャを活用し、インタラクティブ要素のみReactコンポーネントとして実装

### React

- 関数コンポーネントとReact Hooksを使用
- Propsにはインターフェースを定義
- 可能な限り、コンポーネントを純粋関数として実装
- 状態管理は小規模なため、React Context APIを使用

### TypeScript

- `any`型の使用は避け、明示的な型定義を行う
- 複雑な型は`types`ディレクトリに定義
- `as`キーワードの使用は最小限に抑える
- 必要に応じてジェネリクスを活用

### shadcn

- コンポーネント開発では**最優先**でshadcnコンポーネントを使用
- カスタマイズが必要な場合は、shadcnのコンポーネントを拡張
- shadcnで提供されていない機能のみ独自コンポーネントを開発
- Tailwind CSSのクラス名は可読性のため論理的にグループ化

## ディレクトリ構造

```
/
├── public/             # 静的アセット
├── src/
│   ├── components/     # Reactコンポーネント
│   │   ├── ui/         # shadcnコンポーネント
│   │   └── custom/     # カスタムコンポーネント
│   ├── layouts/        # Astroレイアウト
│   ├── pages/          # Astroページ
│   ├── styles/         # グローバルスタイル
│   ├── types/          # 型定義
│   └── utils/          # ユーティリティ関数
├── docs/               # プロジェクトドキュメント
└── astro.config.mjs    # Astro設定
```

## コンポーネント開発ガイドライン

1. **shadcn優先**:
   - 新しいUI要素が必要な場合、まずshadcnに適切なコンポーネントがあるか確認
   - shadcnコンポーネントのカスタマイズを検討
   - 上記で対応できない場合のみ、独自コンポーネントを開発

2. **コンポーネント設計**:
   - 単一責任の原則に従う
   - 再利用性を考慮
   - Propsは明示的に型定義

3. **コンポーネントドキュメンテーション**:
   - 各コンポーネントの使用方法をコメントとして記述
   - 可能であれば使用例をコメントで示す

## パフォーマンス最適化

- 画像最適化にAstroの組み込み機能を使用
- クライアントサイドJavaScriptは必要最小限に
- コンポーネントの遅延ロードを活用
- フォントとアイコンの最適化

## アクセシビリティ

- WAI-ARIAガイドラインに従う
- キーボードナビゲーション対応
- 適切なコントラスト比を維持
- スクリーンリーダー対応 